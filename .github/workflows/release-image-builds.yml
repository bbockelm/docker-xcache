name: Build OSG XCache images 
on:
  push:
    branches:
      - master
  pull_request_target:
    branches:
      - '**'
  repository_dispatch:
    types:
      - dispatch-build

jobs:
  base-image-build:
    name: xcache:${{ matrix.repo }} image build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        repo: ['development', 'testing', 'release']
    steps:

      - uses: actions/checkout@v2

      - name: Cache base image
        uses: actions/cache@v2
        with:
          path: /tmp/.base-buildx-cache
          key: base-${{ matrix.repo }}-buildx-${{ github.sha }}
          # allow cache hits from previous runs of the current branch,
          # parent branch, then upstream branches, in that order
          restore-keys: |
            base-${{ matrix.repo }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        uses: docker/build-push-action@v2.2.2
        with:
          build-args: BASE_YUM_REPO=${{ matrix.repo }}
          pull: True
          target: xcache
          cache-to: type=local,dest=/tmp/.base-buildx-cache,mode=max

  xcache-image-builds:
    name: ${{ matrix.image }}:${{ matrix.repo }} image build
    needs: [base-image-build]
    strategy:
      fail-fast: False
      matrix:
        image: [atlas-xcache, cms-xcache, stash-cache, stash-origin]
        repo: ['development', 'testing', 'release']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Load cached base image
        uses: actions/cache@v2
        with:
          path: /tmp/.base-buildx-cache
          key: base-${{ matrix.repo }}-buildx-${{ github.sha }}

      - name: Cache child image
        uses: actions/cache@v2
        with:
          path: /tmp/.${{ matrix.image }}-buildx-cache
          key: ${{ matrix.image}}-${{ matrix.repo}}-build-${{ github.sha}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        uses: docker/build-push-action@v2.2.2
        with:
          build-args: BASE_YUM_REPO=${{ matrix.repo }}
          target: ${{ matrix.image }}
          cache-from: type=local,src=/tmp/.base-buildx-cache
          cache-to: type=local,dest=/tmp/.${{ matrix.image }}-buildx-cache,mode=max

  test-stash-cache:
    name: Test Stash Cache and Origin
    needs: [xcache-image-builds]
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.repo == 'development' }} 
    strategy:
      fail-fast: False
      matrix:
        repo: ['development', 'testing', 'release']
    steps:
      - uses: actions/checkout@v2

      - name: Load stash-cache build cache
        uses: actions/cache@v2
        with:
          path: /tmp/.stash-cache-buildx-cache
          key: stash-cache-${{ matrix.repo}}-build-${{ github.sha}}

      - name: Load stash-origin build cache
        uses: actions/cache@v2
        with:
          path: /tmp/.stash-origin-buildx-cache
          key: stash-origin-${{ matrix.repo}}-build-${{ github.sha}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Load stash-cache image
        uses: docker/build-push-action@v2.2.2
        with:
          build-args: BASE_YUM_REPO=${{ matrix.repo }}
          load: True  # allow access to built images through the Docker CLI
          tags: stash-cache:latest
          target: stash-cache
          cache-from: type=local,src=/tmp/.stash-cache-buildx-cache

      - name: Load stash-origin image
        uses: docker/build-push-action@v2.2.2
        with:
          build-args: BASE_YUM_REPO=${{ matrix.repo }}
          load: True  # allow access to built images through the Docker CLI
          tags: stash-origin:latest
          target: stash-origin
          cache-from: type=local,src=/tmp/.stash-origin-buildx-cache

      - run: ./tests/test_stashcache_origin.sh "stash-origin:latest"
      - run: ./tests/test_stashcache.sh "stash-cache:latest"

  make-date-tag:
    runs-on: ubuntu-latest
    if: contains(fromJson('["push", "repository_dispatch"]'), github.event_name) && startsWith(github.repository, 'opensciencegrid/')
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
    - name: make date tag
      id: mkdatetag
      run: echo "::set-output name=dtag::$(date +%Y%m%d-%H%M)"

  push-images:
    name: Push ${{ matrix.image }}:${{ matrix.repo }} image
    if: contains(fromJson('["push", "repository_dispatch"]'), github.event_name) && startsWith(github.repository, 'opensciencegrid/')
    strategy:
      matrix:
        image: [atlas-xcache, cms-xcache, stash-cache, stash-origin, xcache]
        repo: ['development', 'testing', 'release']
    needs: [make-date-tag, test-stash-cache]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Load cached child image
        uses: actions/cache@v2
        with:
          path: /tmp/.${{ matrix.image }}-buildx-cache
          key: ${{ matrix.image}}-${{ matrix.repo}}-build-${{ github.sha}}

      - name: Generate tag list
        id: generate-tag-list
        env:
          REPO: ${{ matrix.repo }}
          IMAGE: ${{ matrix.image }}
          TIMESTAMP: ${{ needs.make-date-tag.outputs.dtag }}
        run: |
          docker_repo=opensciencegrid/$IMAGE
          tag_list=$docker_repo:$REPO,$docker_repo:$REPO-$TIMESTAMP
          echo "::set-output name=taglist::$tag_list"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build ${{ matrix.image}} image
        uses: docker/build-push-action@v2.2.2
        with:
          push: True
          build-args: BASE_YUM_REPO=${{ matrix.repo }}
          tags: "${{ steps.generate-tag-list.outputs.taglist }}"
          target: ${{ matrix.image }}
          cache-from: type=local,src=/tmp/.${{ matrix.image }}-buildx-cache
